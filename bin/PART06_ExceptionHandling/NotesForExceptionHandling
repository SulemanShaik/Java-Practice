EXCEPTION HANDLING:
-------------------



      Exception Handling is a mechanism to handle runtime errors such as
      ClassNotFoundException, IOException, SQLException, RemoteException, etc.
      
      
 Advantage of Exception Handling:
 --------------------------------
 
 The core advantage of exception handling is to maintain the normal flow of the application.
 An exception normally disrupts the
 normal flow of the application that is why we use exception handling.
 
 
 Types of Java Exceptions:
 ------------------------
   There are mainly two types of exceptions: checked and unchecked. 
   Here, an error is considered as the unchecked exception.
   According to Oracle, there are three types of exceptions:

   .Checked Exception
   .Unchecked Exception
   .Error
   
   
  1) Checked Exception:
  The classes which directly inherit Throwable class except RuntimeException
  and Error are known as checked exceptions e.g. IOException, SQLException etc.
  Checked exceptions are checked at compile-time.

  2) Unchecked Exception:
  The classes which inherit RuntimeException are known as unchecked exceptions 
   e.g. ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException etc.
    Unchecked exceptions are not checked at compile-time, but they are checked at runtime.

  3) Error:
     Error is irrecoverable e.g. OutOfMemoryError, VirtualMachineError, AssertionError etc. 


Java Exception Keywords
There are 5 keywords which are used in handling exceptions in Java.


try:
---

 The "try" keyword is used to specify a block where we should place exception code. The try
 block must be followed by either catch or finally. It means, we can't use try block alone.
 
 
catch:
------

 The "catch" block is used to handle the exception.
 It must be preceded by try block which means we can't use catch block alone.
 It can be followed by finally block later.
 
 
finally:
-------

 The "finally" block is used to execute the important code of the program.
 It is executed whether an exception is handled or not.


throw:
------

  The "throw" keyword is used to throw an exception.

throws:
------
The "throws" keyword is used to declare exceptions. It doesn't throw an exception.
It specifies that there may occur an exception in the method.
 It is always used with method signature.
 
 
 Common Scenarios of Java Exceptions:
 ------------------------------------


1) A scenario where ArithmeticException occurs
If we divide any number by zero, there occurs an ArithmeticException.

int a=50/0;//ArithmeticException  


2) A scenario where NullPointerException occurs
If we have a null value in any variable, performing any operation on the variable throws a NullPointerException.

String s=null;  
System.out.println(s.length());//NullPointerException  


3) A scenario where NumberFormatException occurs
The wrong formatting of any value may occur NumberFormatException. Suppose I have a string 
variable that has characters, converting this variable into digit will occur
 NumberFormatException.

String s="abc";  
int i=Integer.parseInt(s);//NumberFormatException  


4) A scenario where ArrayIndexOutOfBoundsException occursIf you are inserting any
 value in the wrong index, it would result in ArrayIndexOutOfBoundsException as shown below:

int a[]=new int[5];  
a[10]=50; //ArrayIndexOutOfBoundsException  



           
                           Throwable Exception
                                  |
                                  |
                                  |
                                  |
                                  |
                                  
                        
                   Error                         Exception
                                                    |
                                                    |
                                                    |
                                                    |
                                                    
                                         IOException        Runtime Exception           
                                                    
                                                    
                                                                   
           Difference between final, finally and finalize
           
           
          
     1)	Final is used to apply restrictions on class, method and variable.
        Final class can't be inherited, final method can't be overridden and final variable value can't be changed.
        
 	    Finally is used to place important code, it will be executed whether exception is handled or not.
 	    
 	 	Finalize is used to perform clean up processing just before object is garbage collected.
    2)	Final is a keyword.
    	Finally is a block.
    	Finalize is a method.
           
           
           
           
           
           
           